//-----------------------------------【】----------------------------  
//     代码作用：分块视频标号   
//     OpenCV源代码版本：3.0.0    
//     by：xuejiguang
//     Time:2016/10/10	
//-------------------------------------------------------------------
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
using namespace std;
using namespace cv;

//图像块结构体
struct FraRIO
{
	Mat frameRIO;
	int point_x;
	int point_y;
	bool RIO_flag;

};
//每帧图像分块
vector<FraRIO>  DivFra(Mat &image, int width, int height)
{
	char name = 1;
	int m, n;
	m = image.rows / height;
	n = image.cols / width;
	vector<FraRIO> FraRIO_Out;
	FraRIO temFraRIO;
	for (int j = 0; j<m; j++)
	{
		for (int i = 0; i<n; i++)
		{
			Mat temImage(height, width, CV_8UC3, cv::Scalar(0, 0, 0));//
			Mat imageROI = image(Rect(i*width, j*height, temImage.cols, temImage.rows));//rect(x, y, width, height)选定感兴趣区域
			addWeighted(temImage, 1.0, imageROI, 1.0, 0., temImage);//复制扫描出的边界内数据

			temFraRIO.frameRIO = temImage.clone();
			temFraRIO.point_x = i*width;
			temFraRIO.point_y = j*height;
			FraRIO_Out.push_back(temFraRIO);
		}
	}
	return FraRIO_Out;
}

int main()
{
	//读取视频
	VideoCapture capture("C:/Users/Administrator/Desktop/video/smoke/69.avi");
	if (!capture.isOpened())
		return -1;

	//
	double rate = capture.get(CV_CAP_PROP_FPS);
	int delay = 1000 / rate;

	//定义当前帧
	Mat frame;

	//定义前一帧和当前帧分割后的结构体数组
	vector<FraRIO> frame_RIO;

	namedWindow("image", CV_WINDOW_AUTOSIZE);

	while (capture.read(frame)){
		//对当前帧进行分割，大小24*24
		frame_RIO = DivFra(frame, 24, 24);

			vector<FraRIO>::iterator it = frame_RIO.begin();
			stringstream Num;
			int num = 1;
			//对结构体数组进行遍历
			while (it != frame_RIO.end())
			{
				Num << num;
				//标号
				putText(frame, Num.str(), Point(it->point_x + 3, it->point_y + 15), CV_FONT_HERSHEY_SIMPLEX, 0.3, Scalar(255, 230, 50), 1, 8);
				//画出矩形框
				rectangle(frame, cvPoint(it->point_x, it->point_y), cvPoint(it->point_x + it->frameRIO.cols, it->point_y + it->frameRIO.rows), Scalar(255, 0, 0), 1, 1, 0);//能够实时显示运动物体
				num++;
				it++;

				//清空stringstream缓存
				Num.str("");

			}

			imshow("image", frame);
			waitKey(delay);

	}
	return 0;
}
