#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <vector>
#include <iostream>

using namespace std;
using namespace cv;

void ImgMean(float& c1, float& c2, float& c3, IplImage* pImg)
{
	int nPixel = pImg->height*pImg->width;	// number of pixels in image
	c1 = 0; c2 = 0; c3 = 0;

	uchar* pData = (uchar*)pImg->imageData;
	uchar* pcurPixel = pData;

	//累加各通道的值
	for (int y = 0; y< pImg->height; y++)
	{
		pcurPixel = pData;
		for (int x = 0; x < pImg->width; x++)
		{
			c1 += pcurPixel[0];
			c2 += pcurPixel[1];
			c3 += pcurPixel[2];
			pcurPixel += 3;
		}
		pData += pImg->widthStep;
	}
	// Calculate the mean
	c1 = c1 / nPixel;
	c2 = c2 / nPixel;
	c3 = c3 / nPixel;
}

int main(){
	IplImage *m_pcurFrame = cvLoadImage("G:/fire/ship1.jpg");
	IplImage *m_pcurFrameYCrCb = NULL;

	int m_FrameWidth = m_pcurFrame->width;
	int m_FrameHeight = m_pcurFrame->height;

	IplImage* pImgResult = NULL;

	m_pcurFrameYCrCb = cvCreateImage(cvGetSize(m_pcurFrame), m_pcurFrame->depth, m_pcurFrame->nChannels);
	cvConvertImage(m_pcurFrame, m_pcurFrameYCrCb, CV_BGR2YCrCb);

	pImgResult = cvCreateImage(cvGetSize(m_pcurFrame), IPL_DEPTH_8U, 1);




	assert(pImgResult->nChannels == 1);

	uchar* pData = (uchar*)m_pcurFrame->imageData;
	uchar* pDataYCrCb = (uchar*)m_pcurFrameYCrCb->imageData;

	uchar* pDataResult = (uchar*)pImgResult->imageData;

	uchar* pcurPixel = pData;
	uchar* pcurPixelYCrCb = pDataYCrCb;
	uchar* pcurPixelResult = pDataResult;

	// Get the mean of different channels
	float yy_mean = 0, cr_mean = 0, cb_mean = 0;



	ImgMean(cb_mean, cr_mean, yy_mean, m_pcurFrameYCrCb);

	uchar r = 0, g = 0, b = 0;
	uchar yy = 0, cr = 0, cb = 0;
	for (int y = 0; y< m_FrameHeight; y++)
	{
		pcurPixel = pData + y*m_pcurFrame->widthStep;
		pcurPixelYCrCb = pDataYCrCb + y*m_pcurFrameYCrCb->widthStep;
		pcurPixelResult = pDataResult + y* pImgResult->widthStep;

		for (int x = 0; x < m_FrameWidth; x++)
		{
			b = pcurPixel[0];
			g = pcurPixel[1];
			r = pcurPixel[2];

			cb = pcurPixelYCrCb[0];
			cr = pcurPixelYCrCb[1];
			yy = pcurPixelYCrCb[2];
			//根据公式判断该点是否符合火焰颜色模型的条件
			if (r>120 && yy>cb&&cr>cb&&yy>yy_mean && (abs(cb - cr)>40))
			{
				*pcurPixelResult = 255;
			}
			else
			{
				*pcurPixelResult = 0;
			}
			pcurPixel += 3;
			pcurPixelYCrCb += 3;
			pcurPixelResult++;
		}
	}
	//pImgResult->origin = -1;
	cvShowImage("Color", pImgResult);

	waitKey(0);
	return 0;
}